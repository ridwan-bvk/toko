1. php artisan make:migration cretate_products_table
 - compact(['subjudul']
2.php artisan make:controller ProductController
3.php artisan make:model Product
4.419 expired ga da @csrf token\
5. insert ke db products::create($request->all());
6.Add [_token] to fillable , artinya di model ditambahkan  protected $fillable = ['name','description','price']; atau
  protected $guarded = ['id']//selain kolom ini berari filable
7. @method('PUT'); untuk menambah edit
cara update laravel
 public function update(Request $request,$id){
        $product = product::find($id);
        $product->update($request->all() ); //caraupdate laravel
        return view('products.edit',compact(['product']));
        return redirect('/products');
    }
8. metode Delete diroutenya:
	ROute::Delete('/products/{id}',[ProductController::class,'destroy']);//delete
	tambahkan @method('DELETE'): contoh di form :
                    <form action="/products/{{ $product->id }}" method="POST">
                        @method('DELETE')
                        @csrf
                        <input type="submit" value="delete">
                    </form>
9. resfull API
	.-untuk API gunakan route-API.php, dan pengisian nya sama seperti routes yg di web.php
	.-buat cotroller baru untuk API
	.-untuk Api pemanggilannya gunakan /api
	.-dan biasanya return nya menggunakan return response()->json(['message'=>'succes', 'data'=>'tes']);
	.-$products = Product::all();
        return response()->json(['message'=>'succes', 'data'=>$products]);
	.-untuk metod get bisa dg url untuk api,tp untuk method post haru menggunakan postman
10. gunakan postman untuk memanggil url yg dibuat di api.php
11. untuk api post itu hanya bisa ditest di posman dg mengirimkan data form seperti dg form requestnya,
untuk formnya ada di body di postman
12. untuk update itu menggunakan metode put dan cara testing di postman nya gunakan body pilih row dan pilih j-son
13. untuk aplikasi flutter:
install di cmd
flutter create toko_online
1.cara install flutter, install extensi flutter di vscode
2.buat simolator,bisa menggunakan android studio,chrome,atau hp
   syntak untuk simulator di chrome
a. buat project di vscode fluter new project
b. dcomandpromp tulis flutter doctor untuk pengecekan kesiapan flutter
	kemudian flutter config --enable-web 
	flutter run -d chrome
c. untuk setting api dipubspec.yaml dibawah cupertino_icon, tulis http : ^0.13.0 

materi dart:
1.methode async,await,biasa
---------------------------
.-metode biasa menjadikan lama didb,jadi hang,karena harus berurutan
.-metode async masing2 tida menunggu berurutan agar ui tidak hang/leg
	cara penulisan:
	Future <void> getDataAsync{
		}
future agar hasiltidak langsung return,masa depan
.-metode await itu menunggu dulu urutan,biasanya digunakan didalam async
	cara penulisan wait
	dimainnya harus di tulis async();  --karena metode await dari async jg
	contoh await p.getDataAsync();  -- ini akan menunggu dulu 
.-methode .then itu salah satu alternaatif jika ingin ditunggu seperti pada wait
	cara penulisan 
	p.getDataAsync().then(_){
		print('job 3');
		}
2. konsep OOP untuk refrence/pointer/idintifier
.-pada oop setiap variabel yang di declarsikan itu tidak menyimpan data,tetapi menyimpan alamat(refrence) data
 ex:
	tree fisrsTree=Tree(numberOfFruits;5);
	tree secondTree=Tree(numberofFruits;5);
ini berarti tree fisrsTree != tree secondTree,tetapi
	tree fisrsTree=Tree(numberOfFruits;5);
	tree seconndTree = tree fisrsTree
ini berari tree fisrsTree== tree SecondTree (karena dia beralamat yg sama)
3. keyword FINAL
.-final itu pointer yg menunjuk pada object yg sama seterusnya,selama aplikasi berjalan
.-final tidak dirubah
.-final harus langsung di inisialisasi
.refrence final bisa dideklarasikan dimana za
ex:	final x int;   ini tidak boleh harus ada inisialisasi,seharusnya
	final x int 5; begini
	bisa juga di constraktor
4. keyword CONST/konstanta
..-literal constant
5. fungsi identical (a,b)
	
	
