1. php artisan make:migration cretate_products_table
 - compact(['subjudul']
2.php artisan make:controller ProductController
3.php artisan make:model Product
4.419 expired ga da @csrf token\
5. insert ke db products::create($request->all());
6.Add [_token] to fillable , artinya di model ditambahkan  protected $fillable = ['name','description','price']; atau
  protected $guarded = ['id']//selain kolom ini berari filable
7. @method('PUT'); untuk menambah edit
cara update laravel
 public function update(Request $request,$id){
        $product = product::find($id);
        $product->update($request->all() ); //caraupdate laravel
        return view('products.edit',compact(['product']));
        return redirect('/products');
    }
8. metode Delete diroutenya:
	ROute::Delete('/products/{id}',[ProductController::class,'destroy']);//delete
	tambahkan @method('DELETE'): contoh di form :
                    <form action="/products/{{ $product->id }}" method="POST">
                        @method('DELETE')
                        @csrf
                        <input type="submit" value="delete">
                    </form>
9. resfull API
	.-untuk API gunakan route-API.php, dan pengisian nya sama seperti routes yg di web.php
	.-buat cotroller baru untuk API
	.-untuk Api pemanggilannya gunakan /api
	.-dan biasanya return nya menggunakan return response()->json(['message'=>'succes', 'data'=>'tes']);
	.-$products = Product::all();
        return response()->json(['message'=>'succes', 'data'=>$products]);
	.-untuk metod get bisa dg url untuk api,tp untuk method post haru menggunakan postman
10. gunakan postman untuk memanggil url yg dibuat di api.php
11. untuk api post itu hanya bisa ditest di posman dg mengirimkan data form seperti dg form requestnya,
untuk formnya ada di body di postman
12. untuk update itu menggunakan metode put dan cara testing di postman nya gunakan body pilih row dan pilih j-son
13. untuk aplikasi flutter:
install di cmd
flutter create toko_online
1.cara install flutter, install extensi flutter di vscode
2.buat simolator,bisa menggunakan android studio,chrome,atau hp
   syntak untuk simulator di chrome
a. buat project di vscode fluter new project
b. dcomandpromp tulis flutter doctor untuk pengecekan kesiapan flutter
	kemudian flutter config --enable-web 
	flutter run -d chrome
c. untuk setting api dipubspec.yaml dibawah cupertino_icon, tulis http : ^0.13.0 

materi dart:
1.methode async,await,biasa
---------------------------
.-metode biasa menjadikan lama didb,jadi hang,karena harus berurutan
.-metode async masing2 tida menunggu berurutan agar ui tidak hang/leg
	cara penulisan:
	Future <void> getDataAsync{
		}
future agar hasiltidak langsung return,masa depan
.-metode await itu menunggu dulu urutan,biasanya digunakan didalam async
	cara penulisan wait
	dimainnya harus di tulis async();  --karena metode await dari async jg
	contoh await p.getDataAsync();  -- ini akan menunggu dulu 
.-methode .then itu salah satu alternaatif jika ingin ditunggu seperti pada wait
	cara penulisan 
	p.getDataAsync().then(_){
		print('job 3');
		}
2. konsep OOP untuk refrence/pointer/idintifier
.-pada oop setiap variabel yang di declarsikan itu tidak menyimpan data,tetapi menyimpan alamat(refrence) data
 ex:
	tree fisrsTree=Tree(numberOfFruits;5);
	tree secondTree=Tree(numberofFruits;5);
ini berarti tree fisrsTree != tree secondTree,tetapi
	tree fisrsTree=Tree(numberOfFruits;5);
	tree seconndTree = tree fisrsTree
ini berari tree fisrsTree== tree SecondTree (karena dia beralamat yg sama)
3. keyword FINAL
.-final itu pointer yg menunjuk pada object yg sama seterusnya,selama aplikasi berjalan
.-final tidak dirubah
.-final harus langsung di inisialisasi
.refrence final bisa dideklarasikan dimana za
ex:	final x int;   ini tidak boleh harus ada inisialisasi,seharusnya
	final x int 5; begini
	bisa juga di constraktor
4. keyword CONST/konstanta
..-literal constant
5. fungsi identical (a,b) untuk membedakan dua parameter
				9/22/2021 10:24 AM 
6.metode get data dan set data untuk variabel yang private,variabel privete itu penulisannya depannya ada underscore
  (_contoh)
	void main(list<string> argument){
	  var box = DateTiemScureBox(date.now,'123'
	  
	  ptint(box.getdata('123').toString());
	}

	class DatetimeScureBox{
	  final DateTime _data;
	  final String _pin;
	  DateTimeScureBox(this._data,this._pin);
	  DateTime getData(String pin) =>(pin==_pin)?_data:null;
	}

	
	
	otputna :tgl sekarang
	
7. contoh penulisan if, 	
   (pin==_pin)? true:false;
8. Generic 
===========
adalah type data apa aja/general lebih umum
	contoh ada dua class 
Class I :
	void main(list<string> argument){
	  var box = DateTiemScureBox(DateTime.now,'123'
	  
	  print(box.getdata('123').toString());
	}
	
	class DatetimeScureBox{
	  final DateTime _data;
	  final String _pin;
	  DateTimeScureBox(this._data,this._pin);
	  DateTime getData(String pin) =>(pin==_pin)?_data:null;
	}

	
Class II :
	void main(list<string> argument){
	  var box = IntScureBox(100,'123')
	  
	  print(box.getdata('123').toString());
	}

	class IntScureBox{
	  final Int _data;
	  final String _pin;

	  IntScureBox(this._data,this._pin);
	  int getData(String pin) =>(pin==_pin)?_data:null;
	}

	
data clas diatas yang membedakan hanya typedata _data clasI datetime,class II int,dengan-
generic type data bisa seperti ini

	class ScureBox <X>{
	  final X _data;
	  final String _pin;

	  IntScureBox(this._data,this._pin);
	  X getData(String pin) =>(pin==_pin)?_data:null;
	}
X jadi variabel type data apa aja,tergantung didepannya jadi bisa digunakan apa aja,contoh :
var box = ScureBox <Int> (100,'123') atau var box = ScureBox <datetime> (DateTime.now,'123');
atau var box = ScureBox <string> ('Hallo','123'); atau var box = ScureBox <person> ('Dodi','123');
untuk contoh pemakaiannya:
	void main(list<string> argument){
	  var box = ScureBox <Int> (100,'123')
	 
	  print(box.getdata('123').toString());
	}
9. Enum & Cascade Notation
==========================
Enum adalah penamaan sebuah status agar mudah dipahami
>> contoh tanpa enum
	Class MonsterUcoa{
	 Final int Status; //1.normal,2.poisoned;3.confused

	 void move(){
	  	switch(status){
			case 1	:
			print ('Ucoa is Moving');
			break;
			case 2	:
			print ('Ucoa can't move,ucoa is dying,ucoa need help');
			break;
			case 3	:
			print ('Ucoa is Moving');
			break;
			default:
			print('Ucoa is snipping');
		}
	 }
	 
	void eat(){
		print('ucoa is eating batagor');
		}
	}
cara pemnnggilannya
	void main(list<string> argument){
	 MonsterUcoa m = MonsterUcoa(status:3);
	 m.move()
	}
>> contoh dg enum
	 enum Ucoastatus{normal,poisoned,confused}

	 Class MonsterUcoa{
	 Final int Status; //1.normal,2.poisoned;3.confused

	 void move(){
	  	switch(status){
			case UcoaStatus.normal	:
			print ('Ucoa is Moving');
			break;
			case UcoaStatus.posined	:
			print ('Ucoa can't move,ucoa is dying,ucoa need help');
			break;
			case UcoaStatus.confused:
			print ('Ucoa is Moving');
			break;
			default:
			print('Ucoa is snipping');
		}
	 }
	 
	void eat(){
		print('ucoa is eating batagor');
		}
	}
cara pemnnggilannya
	void main(list<string> argument){
	 MonsterUcoa m = MonsterUcoa(status:UcoaStatus.normal);
	 m.move()
	}
apabila ada kasus, ditengah2 ada print() atau apapun
void main(list<string> argument){
	 MonsterUcoa m = MonsterUcoa(status:UcoaStatus.normal);
	 print('hallo world');
	 m.
	  .. move();
	  .. eat();
	}
11:07 AM 9/23/2021

10. Required
==================
required atau wajib diisi
contoh:
	void main(list <string> arguments){
		person p;
		p = person()
		print(p.age)
	}
	class person{
	   final string name;
	   final int age;
	person(this.name,this.age = 0);
	}
menjadi
import 'package:meta/meta.dart' --- ditambah ini
	void main(list <string> arguments){
		person p;
		p = person(p.name = null) --wajib diisi
		print(p.age)
	}
	class person{
	   final string name;
	   final int age;
	person(@required{this.name,this.age = 0});---tambah required jd wajib diisi
	}
11. assert (keharusan),jadi untuk variabel seperti nama diatas harus diisi terlebih dulu,program akan stop jika tidak diisi
contoh:

import 'package:meta/meta.dart' --- ditambah ini
	void main(list <string> arguments){
		person p;
		p = person(p.name = null) --wajib diisi
		print(p.age)
	}
	class person{
	   final string name;
	   final int age;
	person(@required{this.name,this.age = 0}){;---tambah required jd wajib diisi
	assert(name!= null,"You must give person's name")-- jika tidak disi maka akan muncul assertsion error,dan aplikasi stop
}
	}
12.try catch : ini berfungsi untuk menangkap error agar aplikasi tetap berjalan walau ada error
contoh:
import 'package:meta/meta.dart' --- ditambah ini
	void main(list <string> arguments){
		person p;

		try{
			p = person(p.name = null) --kondisi yg wajib diisi
		}catch(e) {           --menangkap eror disimpan di variabel e
			print(e);
		}

		print("hello");
	}
	class person{
	   final string name;
	   final int age;
	person(@required{this.name,this.age = 0}){;---tambah required jd wajib diisi
	assert(name!= null,"You must give person's name")-- jika tidak disi maka akan muncul assertsion error,dan aplikasi stop
}
	}

13 methode Sort,foreach(perulangan)
a. foreach
	contoh
------------------------------------------------------
	void main(list<string> argument){
	List<person> person[
	person("admin",32),
	person("user",52),
	person("admin",20),
	person("merchant",20),
	person("admin",20),
	person("user",30),
	person("merchant",30),
	person("user",30),
	];

	person.foreach(element){
	print(element.role+'-'+element.age.tostring());
	}
	}

	class person {
	 final string role;
	 final int age;
	 person(this.role,this.age)
	}
------------------------------------------------------
a. sort: p.sort(p1,p2)--jika hasil banding p1 dan p2 negatif maka p1 dikiri (duluan),jika positif p2 dikiri (duluan)
contoh sort integer
------------------------------------------------------
	void main(list<string> argument){
	List<person> person[
	person("admin",32),
	person("user",52),
	person("admin",20),
	person("merchant",20),
	person("admin",20),
	person("user",30),
	person("merchant",30),
	person("user",30),
	];
	
	person.sort(p1.p2)=>p1.age - p2.age; ---jadi uratan kecil kebarwah
	person.foreach(element){
	print(element.role+'-'+element.age.tostring());
	}
	}

	class person {
	 final string role;
	 final int age;
	 person(this.role,this.age)
	}
------------------------------------------------------
	a.2. contoh sort string
coding diatas rubah
person.sort(p1.p2)=>p1.role.compareTo(p2.role);-- a-z
	a.3. dua sort
kalau mau sortrole nya dulu urut,kemudian umurnya dari paling kecil
coding diatas rubah
	person.sort(p1.p2){
	if(p1.role.compareTo(p2.role) != 0){ --kalau sama2 admin/user
	 return p1.role.compareTo(p2.role);
	}else{
	 return p1.age.compareTo(p2.age);
	}
	}
	a.4 kalau mau urut nya custom,bisa dibuat bobot nya dulu	
contoh:
------------------------------------------------------
	void main(list<string> argument){
	List<person> person[
	person("admin",32),
	person("user",52),
	person("admin",20),
	person("merchant",20),
	person("admin",20),
	person("user",30),
	person("merchant",30),
	person("user",30),
	];
	
	person.sort(p1.p2){
	 if(p1.role.roleweight - p2.role.roleweight   != 0){ --kalau sama2 admin/user
		 return p1.role.roleweight - p2.role.roleweight;
	 }else{
		 return p1.age.compareTo(p2.age);
	 }
	}
	person.foreach(element){
	print(element.role+'-'+element.age.tostring());
	}
	}

	class person {
	 final string role;
	 final int age;
	 person(this.role,this.age)

	--tambah
	int get roleweight{
	switch(role){
		case : "Merchant";
		return 1;
		break;
		case : "Admin";
		return 2;
		break;
		default :return 3
	}
	}
	}
------------------------------------------------------